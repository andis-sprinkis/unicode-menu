#!/usr/bin/env sh
set -e

script="$(basename "$0")"

help_info="NAME
    ${script} - Find the closest integer to target.

SYNOPSIS
    ${script} -t INTEGER -s FILE [-i] [-e EQUALITY] [-r BOUNDARY] [-b BASE] [-g]

DESCRIPTION
    In FILE containing a list of integers, searches for the closest integer to the target.

    -t INTEGER 
        Target number - an INTEGER.

    -s FILE
        FILE containing the search space.

        File contents - a linebreak delimited, sorted, min-to-max directional list of non-repeating, negative signed integers.

        For example:
        -100
        4
        5
        9
        45

        or

        -E01EF
        0000
        0001
        0007
        00AB
        E01EF
        10FFFD

    -e EQUALITY
        Target equality boundary.

        Less than - lt
        Less than or equal - le (default)
        Exact - e (TODO)
        Greater than - gt
        Greater than or equal - ge

    -r BOUNDARY
        Repeated value boundary.

        Smallest - min (default)
        Greatest - max

        e.g. for search space 1 3 3 3 5 and the target number 3
        min - the result is number 3 at the index 1
        max - the result is number 3 at the index 3

    -i
        Prints the result number index before the result value.

        e.g.
        The index is 0 and the number 22, it prints '0 22'
        The index is 81 and the number is -FFFF, it prints '81 -FFFF'
    -b BASE
        The numerical base for the target and seach space.

        Decimal - dec (default)
        Hexadecimal - hex

    -g
        Prints debug information during the search.

    -h
        Prints this message.
"

hex_to_dec() {
  sign_n="$(cut -c1 <<< "$1")"

  [ "$sign_n" = "-" ] && {
    printf '%d' "${sign_n}0x$(echo "$1" | cut -c2-)"
    return
  }

  printf '%d' "0x${1}";
}

dec() {
  [ "$base" = "hex" ] && { hex_to_dec "$1"; return; }
  echo "$1"
}

at() {
  echo "$space" | sed "$(("$1" + "1"))!d" # +1 for 0-indexed idx conversion to line num
}

dec_at() {
  dec "$(at "$1")"
}

opt_b=
opt_e=
opt_r=
opt_g=
opt_h=
opt_i=
opt_s=
opt_t=
while getopts b:e:r:s:t:ghi name; do
  case $name in
    b) opd_b="1"
       arg_opt_b="$OPTARG"
       ;;
    e) opt_d="1"
       arg_opt_e="$OPTARG"
       ;;
    g) opt_g="1"
       ;;
    h) echo "$help_info"
       exit
      ;;
    i) opt_i="1"
       ;;
    r) opt_r="1"
       arg_opt_r="$OPTARG"
       ;;
    s) opt_s="1"
       arg_opt_s="$OPTARG"
       ;;
    t) opt_t="1"
       arg_opt_t="$OPTARG"
       ;;
    ?) echo "$help_info"
       exit "2"
       ;;
  esac
done

# Option -g

debug="$opt_g"

# Option -b

[ "$arg_opt_b" ] && [ ! "$arg_opt_b" = "dec" ] && [ ! "$arg_opt_b" = "hex" ] && {
  echo "${script}: The BASE argument for option -b is not valid. It must be either 'dec' or 'hex'."
  exit "2"
}

base="${arg_opt_b:-dec}"

# Option -t

[ ! "$opt_t" ] && {
  echo "${script}: Required option missing - -t NUMBER"
  exit "2"
}

tgt_orig="$arg_opt_t"
[ "$base" = "dec" ] && tgt="$tgt_orig"
[ "$base" = "hex" ] && tgt="$(hex_to_dec "$tgt_orig")"

# Option -s

[ ! "$opt_s" ] && {
  echo "${script}: Required option missing - -s FILE"
  exit "2"
}

[ ! -e "$arg_opt_s" ] && {
  echo "${script}: The file path given in search space argument FILE for option -s doesn't point to an existing file."
  exit "2"
}

space="$(<"$arg_opt_s")"
len_space="$(wc -l <<< "$space")"

# Option -e

[ "$arg_opt_e" ] && [ ! "$arg_opt_e" = "lt" ] && [ ! "$arg_opt_e" = "le" ] && [ ! "$arg_opt_e" = "e" ] && [ ! "$arg_opt_e" = "ge" ] && [ ! "$arg_opt_e" = "gt" ] && {
  echo "${script}: The EQUALITY argument for option -e is not valid."
  exit "2"
}

eql="${arg_opt_e:-"le"}"

# Option -r

[ "$arg_opt_r" ] && [ ! "$arg_opt_r" = "min" ] && [ ! "$arg_opt_r" = "max" ] && {
  echo "${script}: The SIZE argument for option -r is not valid."
  exit "2"
}

rpt="${arg_opt_r:-"min"}"

# Option -i

print_idx="$opt_i"

# Binary search

print_state() {
  [ ! "$debug" ] && return

  [ "$idx_min" ] && [ "$idx_min" -ge "0" ] && [ "$idx_min" -lt "$len_space" ] && min_orig="$(at "$idx_min")" min="$(dec "$min_orig")"
  [ "$idx_max" ] && [ "$idx_max" -ge "0" ] && [ "$idx_max" -lt "$len_space" ] && max_orig="$(at "$idx_max")" max="$(dec "$max_orig")"
  [ "$idx_mid" ] && [ "$idx_mid" -ge "0" ] && [ "$idx_mid" -lt "$len_space" ] && mid_orig="$(at "$idx_mid")" mid="$(dec "$mid_orig")"
  [ "$idx_max" ] && [ "$idx_min" ] && len="$(("$idx_max" - "$idx_min"))"

  state="-:-
:
Target value:${tgt_orig} / dec. ${tgt}
Search equality:${eql}
Repetition bound.:${rpt}
Search space len.:${len}
Middle index:${idx_mid}
Middle value:${mid_orig} / dec. ${mid}
Minimum index:${idx_min}
Minimum value:${min_orig} / dec. ${mid}
Maximum index:${idx_max}
Maximum value:${max_orig} / dec. ${max}
Loop:${idx_loop}
Iteration:${idx_itr}
:"

  column -t -s ':' -W "2" <<< "$state"
}

found() {
  print_state

  [ "$print_idx" ] && { echo "${idx_min} $(at "$idx_min")"; exit; }
  echo "$(at "$idx_min")"; exit
}

not_found() {
  echo "${script}: No number in the search space for the given search equality."
  exit "1"
}

search_loop() {
  idx_loop="$(("$idx_loop" + "1"))" idx_itr="0"
  while [ "$idx_min" -lt "$idx_max" ]; do idx_itr="$(("$idx_itr" + "1"))"
    print_state

    idx_mid="$(("$idx_min" + ("$idx_max" - "$idx_min") / "2"))"
    # 1 - remove right, move left
    # 0 - remove left, move right
    [ "$(f)" = "1" ] && idx_max="$idx_mid" || idx_min="$(("$idx_mid" + "1"))"

    print_state
  done
}

[ "$eql" = "lt" ] && {
  [ "$tgt" -le "$(dec_at "0")" ] && not_found
  f() { [ "$(dec_at $(("$idx_mid" + "1")))" -ge "$tgt" ] && echo "1" || echo "0"; }
}

[ "$eql" = "le" ] && {
  [ "$tgt" -lt "$(dec_at "0")" ] && not_found
  f() { [ "$(dec_at $(("$idx_mid" + "1")))" -gt "$tgt" ] && echo "1" || echo "0"; }
}

[ "$eql" = "gt" ] && {
  [ "$tgt" -ge "$(dec_at "$(("$len_space" - "1"))")" ] && not_found
  f() { [ "$(dec_at "$idx_mid")" -gt "$tgt" ] && echo "1" || echo "0"; }
}

[ "$eql" = "ge" ] && {
  [ "$tgt" -gt "$(dec_at "$(("$len_space" - "1"))")" ] && not_found
  f() { [ "$(dec_at "$idx_mid")" -ge "$tgt" ] && echo "1" || echo "0"; }
}

[ "$eql" = "lt" ] || [ "$eql" = "le" ] && idx_min="-1" idx_max="$(("$len_space" - "1"))"
[ "$eql" = "gt" ] || [ "$eql" = "ge" ] && idx_min="0" idx_max="$len_space"

search_loop

{ 
  [ "$rpt" = "min" ] && { [ "$eql" = "lt" ] || [ "$eql" = "le" ]; } && {
    idx_res="$idx_min" res="$(dec_at "$idx_min")"
    idx_min="0" idx_max="$idx_res"
    f() { [ "$(dec_at "$idx_mid")" -eq "$res" ] && echo "1" || echo "0"; }
  } 
} || {
  [ "$rpt" = "max" ] && { [ "$eql" = "gt" ] || [ "$eql" = "ge" ]; } && {
    idx_res="$idx_min" res="$(dec_at "$idx_min")"
    idx_min="$(("$idx_res" - "1"))" idx_max="$(("$len_space" - "1"))"
    f() { [ "$(dec_at "$(("$idx_mid" + "1"))")" -ne "$res" ] && echo "1" || echo "0"; }
  } 
} && search_loop

found
