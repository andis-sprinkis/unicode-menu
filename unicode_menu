#!/usr/bin/env sh
set -e
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

path_file_unicodeblocks="/usr/share/unicode/Blocks.txt"
path_file_unicodedata="/usr/share/unicode/UnicodeData.txt"

[ -r "$path_file_unicodeblocks" ] || {
  echo "$(basename "$0"): This script requires the Blocks.txt file from the package unicode-character-database"
  exit 1
}

[ -r "$path_file_unicodedata" ] || {
  echo "$(basename "$0"): This script requires the UnicodeData.txt file from the package unicode-character-database"
  exit 1
}

opt_a=
opt_b=
opt_c=
opt_n=
opt_p=
opt_h=
while getopts a:bcnph name; do
  case $name in
    a) opt_a=1
       arg_opt_a="$OPTARG"
       ;;
    b) opt_b=1
       ;;
    c) opt_c=1 # write to clipboard
       ;;
    p) opt_i=1 # paste from clipboard. external handler ?
       ;;
    n) opt_n=1 # to not print the selected char to console
       ;;
    h) echo "$help_info"
       exit
      ;;
    ?) echo "$help_info"
       exit 2
       ;;
  esac
done

app_menu="${arg_opt_a:-fzf --preview-window=hidden}"

menu_item_block_to_range() {
  printf "%s" "$@" | sed -n "s/^\[ \(.*.\) \] -.*$/\1/p" | sed -n "s/\.\./ /p"
}

menu_item_character_to_character() {
  printf "%s" "$@" | sed -n "s/^\[ \(.*.\) \] - \[ .*. \] - \[ .*. \]/\1/p"
}

[ "$opt_b" ] && {
  file_unicodeblocks="$(<"$path_file_unicodeblocks")"
  idx_begin_blocks="$(grep "^0000..007F" --line-number <<< $file_unicodeblocks | cut -d ":" -f 1)"
  idx_end_blocks="$(grep "^100000..10FFFF" --line-number <<< $file_unicodeblocks | cut -d ":" -f 1)"

  unicodeblocks="$(
    printf "%s" "$file_unicodeblocks" | head -n "$idx_end_blocks" | tail -n"+$idx_begin_blocks"
  )"

  menu_item_block="$(echo "$unicodeblocks" | sed -e 's/^/[ /g' | sed -e 's/; / ] - [ /g' | sed -e 's/$/ ]/g' | $app_menu)"
  range="$(menu_item_block_to_range "$menu_item_block")"

  code_tgt_begin="$(cut -d " " -f 1 <<< "$range")"
  code_tgt_end="$(cut -d " " -f 2 <<< "$range")"
}

file_unicodedata=$(cut -d ";" -f "1,2,11" --output-delimiter ";" "$path_file_unicodedata")
all_codes="$(cut -d ";" -f "1" <<< "$file_unicodedata")"

[ "$code_tgt_begin" ] && [ "$code_tgt_end" ] && {
  code_begin="$($dir/closest_int -b "hex" -s <(echo "$all_codes") -t "$code_tgt_begin" -d "p")"
  code_end="$($dir/closest_int -b "hex" -s <(echo "$all_codes") -t "$code_tgt_end" -d "n")"

  idx_begin="$(grep --line-number "^$code_begin;" <<< "$file_unicodedata" | cut -d ":" -f 1)"
  idx_end="$(grep --line-number "^$code_end;" <<< "$file_unicodedata" | cut -d ":" -f 1)"

  unicodedata="$(echo "$file_unicodedata" | head -n "$idx_end" | tail -n"+$idx_begin")" 
  codes="$(echo "$all_codes" | head -n "$idx_end" | tail -n"+$idx_begin")"
} || {
  unicodedata="$file_unicodedata"
  codes="$all_codes"
}

names="$(
  cut -d ";" -f "2,3" <<< "$unicodedata" \
  | sed -e 's/;$//g' \
  | sed -e 's/;/ | /g' \
  | sed -e 's/$/ ]/g' \
  | sed -e 's/^/[ /g' \
  | sed -e 's/<\|>//g' \
)"

chars="$(
  ifs_old=$IFS; IFS=$'\n'

  for code in $codes; do
    [ "$code" = "0000" ] || [ "$code" = "000A" ] && {
      echo "[ â˜  ] -"
      continue
    }

    printf '[ %b ] -\n' "\\U$code"
  done

  IFS=$ifs_old
)"

menu_item_character="$(
  paste -d" " \
    <(echo "$chars") \
    <(echo "$codes" | sed -e 's/$/ ] -/g' | sed -e 's/^/[ /g') \
    <(echo "$names") \
  | $app_menu
)"

menu_item_character_to_character "$menu_item_character"
