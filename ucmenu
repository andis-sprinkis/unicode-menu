#!/usr/bin/env sh
set -e

script="$(basename "$0")"
help_info="NAME
    ${script} - Use with a menu program to output a Unicode character's value, property or an escape sequence.

SYNOPSIS
    ${script} [-b] [-m COMMAND] [-n COMMAND] [-r COMMAND] [-k FILE] [-t FILE]

DESCRIPTION
    For presenting the menu options, this script requires a menu application like dmenu, wmenu or fzf (default).

    The final-selected character output property gets printed to stdout.

    -m COMMAND
        The Unicode block selection menu command.

    -n COMMAND
        The Unicode character selection menu command.

    -r COMMAND
        The output selection menu command.

    -k FILE
        The Unicode Character Database (UCD) Blocks.txt file path.

    -t FILE
        The Unicode Character Database (UCD) UnicodeData.txt file path.

    The script requires a menu program like dmenu, wmenu, fzf or rofi and the Unicode Character Database (UCD).

    For COMMAND argument in -m, -n, -r the string \"%P\" is the subsitution placeholder for using the built-in prompt text.

    The default menu command for block, character and output selection menus is \"fzf --prompt='%P: ' --preview-window=hidden\".

    The default directory paths this script, in the order, checks for the UCD Blocks.txt and UnicodeData.txt files are
    1.  /usr/share/unicode/
    2.  \${XDG_DATA_HOME:-\$HOME/.local/share}/unicode/"

opt_h=
opt_k=
opt_m=
opt_n=
opt_r=
opt_t=
while getopts m:n:r:k:t:h name; do
  case $name in
    h)
      echo "$help_info"
      exit
    ;;
    m)
      opt_m="1"
      arg_opt_m="$OPTARG"
    ;;
    n)
      opt_n="1"
      arg_opt_n="$OPTARG"
    ;;
    r)
      opt_r="1"
      arg_opt_r="$OPTARG"
    ;;
    k)
      opt_k="1"
      arg_opt_k="$OPTARG"
    ;;
    k)
      opt_t="1"
      arg_opt_t="$OPTARG"
    ;;
    ?)
      echo "$help_info" 1>&2
      exit "2"
    ;;
  esac
done

prompt_blocks="Block" 
prompt_chars="Character"
prompt_output="Output"

menu_blocks="$(echo "${arg_opt_m:-fzf --prompt='%P: ' --preview-window=hidden}" | sed "s/%P/${prompt_blocks}/g")"
menu_chars="$(echo "${arg_opt_n:-fzf --prompt='%P: ' --preview-window=hidden}" | sed "s/%P/${prompt_chars}/g")"
menu_output="$(echo "${arg_opt_r:-fzf --prompt='%P: ' --preview-window=hidden}" | sed "s/%P/${prompt_output}/g")"

path_file_unicodeblocks="$({
  if [ "$arg_opt_k" ]; then
    echo "$arg_opt_k"
  else
    for path in "/usr/share/unicode/Blocks.txt" "${XDG_DATA_HOME:-$HOME/.local/share}/unicode/Blocks.txt"; do
      if [ -r "$path" ]; then
        echo "$path"
        break
      fi
    done
  fi
})"

path_file_unicodedata="$({
  if [ "$arg_opt_t" ]; then
    echo "$arg_opt_t"
  else
    for path in "/usr/share/unicode/UnicodeData.txt" "${XDG_DATA_HOME:-$HOME/.local/share}/unicode/UnicodeData.txt"; do
      if [ -r "$path" ]; then
        echo "$path"
        break
      fi
    done
  fi
})"

if [ ! -r "$path_file_unicodeblocks" ] || [ ! -r "$path_file_unicodedata" ]; then
  echo "${script}: This script requires the Blocks.txt and UnicodeData.txt files from the Unicode Character Database (UCD)." 1>&2
  exit "1"
fi

file_unicodedata="$(cut -d ";" -f "1,2,11" --output-delimiter ";" "$path_file_unicodedata")"
all_codes="$(echo "$file_unicodedata" | cut -d ";" -f "1")"

hex_to_dec() { printf '%d' "0x${1}"; }
dec() { hex_to_dec "$1"; }
at() { echo "$space" | sed "$(("$1" + "1"))q;d"; } # +1 for 0-indexed idx conversion to line num
dec_at() { dec "$(at "$1")"; }

file_unicodeblocks="$(cat "$path_file_unicodeblocks")"
idx_begin_blocks="$(echo "$file_unicodeblocks" | grep "^0000..007F" --line-number | cut -d ":" -f 1)"
idx_end_blocks="$(echo "$file_unicodeblocks" | grep "^100000..10FFFF" --line-number | cut -d ":" -f 1)"

unicodeblocks="0000..10FFFF; All
$(echo "$file_unicodeblocks" | head -n "$idx_end_blocks" | tail -n"+$idx_begin_blocks")"

menu_blocks_selectables="$(echo "$unicodeblocks" | sed -e 's/^/[ /g' -e 's/; / ] - [ /g' -e 's/$/ ]/g')"

show_menu_blocks() {
  menu_prev="$menu"
  menu="blocks"

  selected_block_prev="$selected_block"
  selected_block="$(set +e; echo "$menu_blocks_selectables" | eval "$menu_blocks"; set -e)"
}

show_menu_chars() {
  menu_prev="$menu"
  menu="chars" 

  if ! {
    [ "$menu_prev" = "output" ] || { [ "$selected_block" ] && [ "$selected_block_prev" = "$selected_block" ]; }
  }; then
    read -r "code_tgt_begin" "code_tgt_end" < <(
      printf "%s\n" "$selected_block" | sed -n "s/^\[ \(.*.\) \] -.*$/\1/p" | sed -n "s/\.\./ /p"
    )

    if [ "$code_tgt_begin" = "0000" ] && [ "$code_tgt_end" = "10FFFF" ]; then
      unicodedata="$file_unicodedata" selection_codes="$all_codes"
    else
      # For determining the unicode blocks inexact bounaries, the binary search implementation is extracted from https://github.com/andis-sprinkis/binary-search-shell

      space="$all_codes" len_space="$(echo "$space" | wc -l)"
      idx_begin="$(("$({
        # Binary search:
        # - Equality - greater-or-equal
        # - Repetition boundary - min. index

        tgt="$(hex_to_dec "$code_tgt_begin")" idx_min="0" idx_max="$len_space"
        while [ "$idx_min" -lt "$idx_max" ]; do
          idx_mid="$(("$idx_min" + ("$idx_max" - "$idx_min") / "2"))"

          if [ "$(dec_at "$idx_mid")" -ge "$tgt" ]; then 
            idx_max="$idx_mid"
          else
            idx_min="$(("$idx_mid" + "1"))"
          fi
        done

        idx_res="$idx_min" res="$(dec_at "$idx_min")" idx_min="0" idx_max="$idx_res"
        while [ "$idx_min" -lt "$idx_max" ]; do
          idx_mid="$(("$idx_min" + ("$idx_max" - "$idx_min") / "2"))"

          if [ "$(dec_at "$idx_mid")" -eq "$res" ]; then
            idx_max="$idx_mid"
          else
            idx_min="$(("$idx_mid" + "1"))"
          fi
        done

        echo "$idx_min"
      })" + "1"))"

      idx_end="$(("$(
        # Binary search:
        # - Equality - less-or-equal
        # - Repetition boundary - max. index

        tgt="$(hex_to_dec "$code_tgt_end")" idx_min="-1" idx_max="$(("$len_space" - "1"))"
        while [ "$idx_min" -lt "$idx_max" ]; do
          idx_mid="$(("$idx_min" + ("$idx_max" - "$idx_min") / "2"))"
          [ "$(dec_at $(("$idx_mid" + "1")))" -gt "$tgt" ] && idx_max="$idx_mid" || idx_min="$(("$idx_mid" + "1"))"
        done

        echo "$idx_min"
      )" + "1"))"

      unicodedata="$(echo "$file_unicodedata" | head -n "$idx_end" | tail -n"+$idx_begin")" 
      selection_codes="$(echo "$all_codes" | head -n "$idx_end" | tail -n"+$idx_begin")"
    fi

    selection_names="$(echo "$unicodedata" | sed -e 's/;$//g' -e 's/;/ | /g' -e 's/$/ ]/g' -e 's/^/[ /g' | cut -d ";" -f "2,3")"

    selection_chars="$(
      IFS_=$IFS; IFS="
"
      for code in $selection_codes; do
        IFS="$IFS_"

        if [ "$code" = "0000" ] || [ "$code" = "000A" ]; then
          echo "[ â˜  ] -"
          continue
        fi

        printf '[ %b ] -\n' "\\U$code"
      done
    )"

    menu_chars_selectables="$(
      paste -d" " \
        <(echo "$selection_chars") \
        <(echo "$selection_codes" | sed -e 's/$/ ] -/g' -e 's/^/[ /g') \
        <(echo "$selection_names") \
    )"
  fi

  selected_char_prev="$selected_char"

  set +e
  selected_char="$(echo "$menu_chars_selectables" | eval "$menu_chars")"
  set -e
}

show_menu_output() {
  menu_prev="$menu"
  menu="output"

  if [ "$selected_char" ] && [ "$selected_char_prev" != "$selected_char" ]; then
    selected_char_char="$(printf "%s" "$selected_char" | sed -n "s/^\[ \(.*.\) \] - \[ .*. \] - \[ .*. \]/\1/p")"
    selected_char_code_point="$(printf "%s" "$selected_char" | sed -n "s/^\[ .*. \] - \[ \(.*.\) \] - \[ .*. \]/\1/p")"
    selected_char_name="$(printf "%s" "$selected_char" | sed -n "s/^\[ .*. \] - \[ .*. \] - \[ \(.*.\) \]/\1/p")"

    code_point_dec="$(hex_to_dec "$selected_char_code_point")"
    code_point_hex_no_pad="$(printf "%x" "$code_point_dec")"
    # code_point_hex_4_pad="$(printf "%04x" "$code_point_dec")"
    code_point_hex_6_pad="$(printf "%06x" "$code_point_dec")"
    # code_point_hex_8_pad="$(printf "%08x" "$code_point_dec")"
    char_utf8_hex="$(printf "%s" "$selected_char_char" | hexdump -e '5/1 "0x%02x "' | sed -e 's/ 0x  //g')"
    char_utf16_hex="$(printf "%s" "$selected_char_char" | iconv -f "utf-8" -t "utf-16" | hexdump -e '3/2 "0x%04x "' | sed -e 's/0xfeff //g' -e 's/ 0x    //g')"
    char_utf32_hex="$(printf "%s" "$selected_char_char" | iconv -f "utf-8" -t "utf-32" | hexdump -e '2 "0x%08x"' | sed -e 's/0x0000feff//g')"
    char_utf8_urlencode="$(printf "%s" "$selected_char_char" | hexdump -e '5/1 "%02x"' | sed -e 's/ *//g' -e 's/\(..\)/%\1/g')"

    output_char="$selected_char_char"
    output_name_std="$selected_char_name"
    output_code_point_std="U+${selected_char_code_point}"
    output_code_point_dec="${code_point_dec}"
    output_code_point_hex="0x${code_point_hex_no_pad}"
    output_utf8_hex="${char_utf8_hex}"
    output_utf16_hex="${char_utf16_hex}"
    output_utf32_hex="${char_utf32_hex}"
    output_code_point_escape_html_dec="&#${code_point_dec};"
    output_code_point_escape_html_hex="&#x${code_point_hex_no_pad};"
    output_utf8_urlencode="$char_utf8_urlencode"
    output_code_point_escape_css="\\${code_point_hex_no_pad}"
    output_code_point_escape_css_6_digit="\\${code_point_hex_6_pad}"
    output_url_wikipedia="https://en.wikipedia.org/wiki/$char_utf8_urlencode"

    menu_output_selectables="[ ${output_char} ] - [ Character ]
[ ${output_name_std} ] - [ Name | Standard ]
[ ${output_code_point_std} ] - [ Code point | Hex. | Standard ]
[ ${output_code_point_dec} ] - [ Code point | Dec. ]
[ ${output_code_point_hex} ] - [ Code point | Hex. ]
[ ${output_utf8_hex} ] - [ UTF-8 | Hex. ]
[ ${output_utf16_hex} ] - [ UTF-16 | Hex. ]
[ ${output_utf32_hex} ] - [ UTF-32 | Hex. ]
[ ${output_utf8_urlencode} ] - [ UTF-8 | Hex. | Esc. | URL ]
[ ${output_code_point_escape_html_dec} ] - [ Code point | Dec. | Esc. | HTML, XML ]
[ ${output_code_point_escape_html_hex} ] - [ Code point | Hex. | Esc. | HTML, XML ]
[ ${output_code_point_escape_css} ] - [ Code point | Hex. | Esc.| CSS ]
[ ${output_code_point_escape_css_6_digit} ] - [ Code point | Hex. | Esc. | 6 digits | CSS ]
[ ${output_url_wikipedia} ] - [ Wikipedia ]"
  fi

  set +e
  selected_output="$(echo "$menu_output_selectables" | eval "$menu_output")"
  set -e
}

while true; do
  if [ ! "$selected_block" ]; then
    if [ "$menu" = "blocks" ]; then
      exit "1"
    fi

    show_menu_blocks
    continue
  fi

  if [ ! "$selected_char" ]; then
    if [ "$menu" = "chars" ]; then
      show_menu_blocks
      continue
    fi

    show_menu_chars
    continue
  fi

  if [ ! "$selected_output" ]; then
    if [ "$menu" = "output" ]; then
      show_menu_chars
      continue
    fi

    show_menu_output
    continue
  fi

  break
done

output="$(printf "%s" "$selected_output" | sed -n "s/^\[ \(.*.\) \] - \[ .*. \]/\1/p")"
printf "%s" "$output"
