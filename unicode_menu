#!/usr/bin/env sh
set -e
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

path_file_unicodeblocks="/usr/share/unicode/Blocks.txt"
path_file_unicodedata="/usr/share/unicode/UnicodeData.txt"

[ -r "$path_file_unicodeblocks" ] || {
  echo "$(basename "$0"): This script requires the Blocks.txt file from the package unicode-character-database"
  exit 1
}

[ -r "$path_file_unicodedata" ] || {
  echo "$(basename "$0"): This script requires the UnicodeData.txt file from the package unicode-character-database"
  exit 1
}

opt_b=
opt_m=
opt_h=
while getopts m:n:bh name; do
  case $name in
    b) opt_b=1
       ;;
    h) echo "$help_info"
       exit
      ;;
    m) opt_m=1
       arg_opt_m="$OPTARG"
       ;;
    n) opt_n=1
       arg_opt_n="$OPTARG"
       ;;
    ?) echo "$help_info"
       exit 2
       ;;
  esac
done

prompt_menu_block="Choose a character block"
prompt_menu_char="Choose a character"

menu_block="$(echo "${arg_opt_m:-fzf --prompt='%M: ' --preview-window=hidden}" | sed "s/%M/${prompt_menu_block}/g")"
menu_char="$(echo "${arg_opt_n:-fzf --prompt='%N: ' --preview-window=hidden}" | sed "s/%N/${prompt_menu_char}/g")"

# e.g. -b -m "dmenu -p '%M: ' " -n "dmenu -p '%N: ' "

file_unicodedata="$(cut -d ";" -f "1,2,11" --output-delimiter ";" "$path_file_unicodedata")"
all_codes="$(cut -d ";" -f "1" <<< "$file_unicodedata")"

[ "$opt_b" ] && {
  file_unicodeblocks="$(<"$path_file_unicodeblocks")"
  idx_begin_blocks="$(grep "^0000..007F" --line-number <<< $file_unicodeblocks | cut -d ":" -f 1)"
  idx_end_blocks="$(grep "^100000..10FFFF" --line-number <<< $file_unicodeblocks | cut -d ":" -f 1)"

  unicodeblocks="$(printf "%s" "$file_unicodeblocks" | head -n "$idx_end_blocks" | tail -n"+$idx_begin_blocks")"

  menu_item_block="$(echo "$unicodeblocks" | sed -e 's/^/[ /g' -e 's/; / ] - [ /g' -e 's/$/ ]/g' | eval "$menu_block")"

  range="$(printf "%s" "$menu_item_block" | sed -n "s/^\[ \(.*.\) \] -.*$/\1/p" | sed -n "s/\.\./ /p")"

  read -r "code_tgt_begin" "code_tgt_end" < <(echo "$range")
}

[ "$code_tgt_begin" ] && [ "$code_tgt_end" ] && {
  read -r "idx_begin" "code_begin" < <(
    $dir/bsearch -s <(echo "$all_codes") -t "$code_tgt_begin" -i -b "hex" -e "ge" -r "min"
  )
  idx_begin="$(("$idx_begin" + "1"))"

  read -r "idx_end" "code_end" < <(
    $dir/bsearch -s <(echo "$all_codes") -t "$code_tgt_end" -i -b "hex" -e "le" -r "max"
  )
  idx_end="$(("$idx_end" + "1"))"

  unicodedata="$(echo "$file_unicodedata" | head -n "$idx_end" | tail -n"+$idx_begin")" 
  codes="$(echo "$all_codes" | head -n "$idx_end" | tail -n"+$idx_begin")"
} || {
  unicodedata="$file_unicodedata"
  codes="$all_codes"
}

names="$(
  cut -d ";" -f "2,3" <<< "$unicodedata" | sed -e 's/;$//g' -e 's/;/ | /g' -e 's/$/ ]/g' -e 's/^/[ /g' -e 's/<\|>//g'
)"

chars="$(
  ifs_old=$IFS; IFS=$'\n'

  for code in $codes; do
    [ "$code" = "0000" ] || [ "$code" = "000A" ] && {
      echo "[ â˜  ] -"
      continue
    }

    printf '[ %b ] -\n' "\\U$code"
  done

  IFS=$ifs_old
)"

menu_item_character="$(
  paste -d" " \
    <(echo "$chars") \
    <(echo "$codes" | sed -e 's/$/ ] -/g' -e 's/^/[ /g') \
    <(echo "$names") \
  | eval "$menu_char"
)"

# Print char.

printf "%s" "$menu_item_character" | sed -n "s/^\[ \(.*.\) \] - \[ .*. \] - \[ .*. \]/\1/p"
